/* pacman_imu.hpp
 * 
 * the library handles the acquisition of the phidget imu mounted on the 
 * Pacman experiment
 * 
 * developed by: Mattia Mazzucato
 * email: matt.mazzucato@gmail.com
 * 
 */

#include <stdio.h>
#include <stdlib.h>

#include <phidget22.h>
#include "global.h"

#ifndef _WIN32
#include <unistd.h>
#else
#include <Windows.h>
#endif

//#define PRINT_DBG_MSGS
//#define ENABLE_PHIDGET_LOG_INFO

#define FN_SIZE 80 // length of file name string

PhidgetSpatialHandle ch;
PhidgetReturnCode res;
const char *errs;

FILE *file;
char rslt_file_name[FN_SIZE];


static void CCONV ssleep(int);
const string currentDateTime(void);


MyKalmanFilter *filt;
bool *imuCommunicationON;
int p = 0;


static void CCONV onAttachHandler(PhidgetHandle phid, void *ctx) {
	PhidgetReturnCode res;
	int hubPort;
	int channel;
	int serial;

	res = Phidget_getDeviceSerialNumber(phid, &serial);
	if (res != EPHIDGET_OK) {
		fprintf(stderr, "failed to get device serial number\n");
		return;
	}

	res = Phidget_getChannel(phid, &channel);
		if (res != EPHIDGET_OK) {
		fprintf(stderr, "failed to get channel number\n");
		return;
	}

	res = Phidget_getHubPort(phid, &hubPort);
		if (res != EPHIDGET_OK) {
		fprintf(stderr, "failed to get hub port\n");
		hubPort = -1;
	}

	#ifdef PRINT_DBG_MSGS
	if (hubPort == -1)
		printf("channel %d on device %d attached\n", channel, serial);
	else
		printf("channel %d on device %d hub port %d attached\n", channel, serial, hubPort);
	#endif

	uint32_t minInterval, maxInterval;
	res = PhidgetSpatial_getMinDataInterval((PhidgetSpatialHandle)phid, &minInterval);
	if (res != EPHIDGET_OK) {
		fprintf(stderr, "failed to get minInterval\n");
		return;
	}

	PhidgetSpatial_getMaxDataInterval((PhidgetSpatialHandle)phid, &maxInterval);
	if (res != EPHIDGET_OK) {
		fprintf(stderr, "failed to get maxInterval\n");
		return;
	}

	#ifdef PRINT_DBG_MSGS
	printf("[ %d %d ]", minInterval, maxInterval);
	#endif

	// set time interval [ms] between data acquisition
	res = PhidgetSpatial_setDataInterval((PhidgetSpatialHandle)phid, 12); // sono accettati solo multipli di 4 ms

	if (res != EPHIDGET_OK) {
		fprintf(stderr, "failed set dataInterval\n");
		hubPort = -1;
	}

	
	// generate result filename according to test number
	snprintf(rslt_file_name, FN_SIZE-1, "../results/TestIMU_%d__%s.dat", test_number ,currentDateTime().c_str());
	file = fopen(rslt_file_name,"w");
	
	if (file == NULL)
	{
		printf("Error opening file!\n");
		exit(1);
	}


	/*
	* Enable logging to stdout
	*/
	#ifdef ENABLE_PHIDGET_LOG_INFO
		PhidgetLog_enable(PHIDGET_LOG_INFO, NULL);
	#endif // ENABLE_PHIDGET_LOG_INFO

}

const string currentDateTime(void)
{
	time_t     now = time(0);
	struct tm tstruct;
	char      buf[80];
	tstruct = *localtime(&now);
	// Visit http://en.cppreference.com/w/cpp/chrono/c/strftime
	// for more information about date/time format
	strftime(buf, sizeof(buf), "%y%m%d_%H%M%S", &tstruct);

	return buf;
}


static void CCONV onDetachHandler(PhidgetHandle phid, void *ctx) {
	PhidgetReturnCode res;
	int hubPort;
	int channel;
	int serial;

	res = Phidget_getDeviceSerialNumber(phid, &serial);
	if (res != EPHIDGET_OK) {
		fprintf(stderr, "failed to get device serial number\n");
		return;
	}

	res = Phidget_getChannel(phid, &channel);
	if (res != EPHIDGET_OK) {
		fprintf(stderr, "failed to get channel number\n");
		return;
	}

	res = Phidget_getHubPort(phid, &hubPort);
	if (res != EPHIDGET_OK)
		hubPort = -1;

	#ifdef PRINT_DBG_MSGS
	if (hubPort != -1)
		printf("channel %d on device %d detached\n", channel, serial);
	else
		printf("channel %d on device %d hub port %d detached\n", channel, hubPort, serial);
	#endif

}

static void CCONV errorHandler(PhidgetHandle phid, void *ctx, 
						Phidget_ErrorEventCode errorCode, const char *errorString) 
{
	fprintf(stderr, "Error: %s (%d)\n", errorString, errorCode);
}

static void CCONV onSpatialData(PhidgetSpatialHandle ch, void *ctx, 
						const double* acceleration, const double* angularRate, 
						const double* magneticField, double timestamp) 
{

		//printf("imu %d\n", p++);
	#ifdef PRINT_DBG_MSGS
		//printf("Timestamp: %.0f\n", timestamp);
		//printf("acceleration Changed:%7.3f%8.3f%8.3f\n", acceleration[0], acceleration[1], acceleration[2]);
		//printf("AngularRate Changed:%7.3f%8.3f%8.3f\n", angularRate[0], angularRate[1], angularRate[2]);
		//printf("magneticField Changed:%7.3f%8.3f%8.3f\n", magneticField[0], magneticField[1], magneticField[2]);
		printf("\n");
	# endif
	
	// write data to file
	fprintf(file, "%.0f\t%6.4f\t%6.4f\t%6.4f\t%6.4f\t%6.4f\t%6.4f\n", timestamp,
			acceleration[0], acceleration[1], acceleration[2],
			angularRate[0], angularRate[1], angularRate[2]
			);
	/*
	ser->sendCharToArduino('i');
	float anglesToArd[3];
	for(int i = 0; i<3; i++) {
		anglesToArd[i] = angularRate[i];
	}
	ser->sendDataToArduino(anglesToArd);
	*/
	if(*imuCommunicationON) {
		float angleVels[3];
		for(int i = 0; i<3; i++) {
			angleVels[i] = angularRate[i]*3.14/180.0;
		}
		
		//printf("%.0f\tprima", timestamp);
		filt->timeUpdate(angleVels, 0.012);
		//printf("\tdopo\n");
	}
}

static void CCONV PhidgetRun(MyKalmanFilter *filter, bool *commStarter){
		
	filt = filter;
	imuCommunicationON = commStarter;
	
	res = PhidgetSpatial_create(&ch);
	if (res != EPHIDGET_OK) {
		fprintf(stderr, "failed to create spatial channel\n");
		exit(1);
	}

	// res = initChannel((PhidgetHandle)ch);
	// if (res != EPHIDGET_OK) {
	//   Phidget_getErrorDescription(res, &errs);
	//   fprintf(stderr, "failed to initialize channel:%s\n", errs);
	//   exit(1);
	// }

	res = Phidget_setOnAttachHandler( (PhidgetHandle)ch, onAttachHandler, NULL);
	if (res != EPHIDGET_OK) {
		Phidget_getErrorDescription(res, &errs);
		fprintf(stderr, "failed to set onAttachHandler: %s\n", errs);
		goto done;
	}

	res = Phidget_setOnErrorHandler( (PhidgetHandle)ch, errorHandler, NULL);
	if (res != EPHIDGET_OK) {
		Phidget_getErrorDescription(res, &errs);
		fprintf(stderr, "failed to set onErrorHandler: %s\n", errs);
		goto done;
	}

	res = PhidgetSpatial_setOnSpatialDataHandler(ch, onSpatialData, NULL);
	if (res != EPHIDGET_OK) {
		Phidget_getErrorDescription(res, &errs);
		fprintf(stderr, "failed to set onSpatialDataHandler: %s\n", errs);
		goto done;
	}

	res = Phidget_setOnDetachHandler( (PhidgetHandle)ch, onDetachHandler, NULL);
	if (res != EPHIDGET_OK) {
		Phidget_getErrorDescription(res, &errs);
		fprintf(stderr, "failed to set onDetachHandler: %s\n", errs);
		goto done;
	}

	/*
	* Open the channel synchronously: waiting a maximum of 5 seconds.
	*/
	res = Phidget_openWaitForAttachment((PhidgetHandle)ch, 5000);
	if (res != EPHIDGET_OK) {
		if (res == EPHIDGET_TIMEOUT) {
			printf("Channel did not attach after 5 seconds: please check that the device is attached\n");
		} else {
			Phidget_getErrorDescription(res, &errs);
			fprintf(stderr, "failed to open channel:%s\n", errs);
		}
		goto done;
	}

	#ifdef PRINT_DBG_MSGS
	printf("Gathering data for 20 seconds...\n");
	#endif
	
	ssleep(30);

	done:

	Phidget_close((PhidgetHandle)ch);
	PhidgetSpatial_delete(&ch);
	
	// close results file
	fclose(file);

	
	printf("Imu acquisition concluded\n");

	//exit(res);
	return;
}


static void CCONV ssleep(int tm) {
	#ifdef _WIN32
	Sleep(tm * 1000);
	#else
	sleep(tm);
	#endif
}
